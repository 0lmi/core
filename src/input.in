################################################################
@CF_DIR=/root/cf3
################################################################
ACCESSED_BEFORE
{
class:
top10

prepare:     
file ("earlier",ACCESS); 
file ("later",ACCESS)

execute:
policy("unit_accessed_before.cf","K")

output:
report("The earlier file has been accessed before the later")

cleanup:
file ("earlier",DELETE) 
file ("later",DELETE)
}

################################################################

BACKREFERENCES_FILES
{
class:
top10

prepare:
NA
file ("cf3_hello",CREATE); 

execute:
policy("unit_backreferences_files.cf","KI")

output:
addline("private edit variable is .*","cf3_hello")
#file("cf3_hello.cf-before-edit",EXISTS)


 cleanup:
 file("cf3_hello", DELETE)
 file("cf3_hello.cf-before-edit", DELETE)

}

################################################################

ARRAYS
{
class:
top10

prepare:
NA

execute:
policy("unit_arrays.cf", "K")

output:
report("Global ([a-z]+) and ([a-z]+)")

cleanup:
NA
}

################################################################
SELECT_MODE
{
class:
top10

prepare:
NA

execute:
policy("unit_select_mode.cf", "KI")

output:
info(".*DETECTED.*")

cleanup:
NA
}

################################################################
	
UNIT_FILEPERMS
{
class:
top10

prepare:
file("unit_fileperms.tmp", CREATE)

execute:
policy("unit_fileperms.cf", "K")

output:       
checkfileperms ("unit_fileperms.tmp","0755")
checkowner("unit_fileperms.tmp","bishwa")
  # Check Get the file owner
  
cleanup:
file("unit_fileperms.tmp", DELETE)
}

################################################################
# this is a negative test
UNIT_FILES_NOT_EXIST
{
class:
top10

prepare:
NA

execute:
policy("unit_filesexist.cf", "K")

output:
report("Does not yet exist")

cleanup:
NA
}
################################################################

UNIT_FILESEXIST
{
class:
top10

prepare:
file("a", CREATE)
file("b", CREATE)
file("c", CREATE)

execute:
policy("unit_filesexist.cf", "K")

output:
report("File does exist")

cleanup:
file("a", DELETE)
file("b", DELETE)
file("c", DELETE)
}
################################################################
# this is a negative test
UNIT_FILES_NOT_EXIST2
{
class:
top10

prepare:
NA

execute:
policy("unit_filesexist2.cf", "K")

output:
report("Does not yet exist")

cleanup:
NA
}
################################################################

UNIT_FILESEXIST2
{
class:
top10

prepare:
file("x", CREATE)
file("y", CREATE)
file("z", CREATE)

execute:
policy("unit_filesexist2.cf", "K")

output:
report("File does exist")

cleanup:
file("x", DELETE)
file("y", DELETE)
file("z", DELETE)
}

################################################################

CHANGED_BEFORE
{
class:
top10

prepare:
file ("later.tmp", ACCESS)
file ("earlier.tmp", ACCESS);

execute:
policy("unit_changedbefore.cf","K")

output:
report("Earlier than later!")

cleanup:
file ("earlier.tmp",DELETE)
file ("later.tmp",DELETE)
}
################################################################
CLASSES_GLOBAL
{
class:
top10

prepare:
NA

execute:
policy("unit_classes_global.cf","K")

output:
report("Success")

cleanup:
NA
}

################################################################
CLASSMATCH
{
class:
top10

prepare:
NA

execute:
policy("unit_classmatch.cf","K")

output:
report("Host matches pattern")

cleanup:
NA
}

################################################################

COMPARE
{
class:
top10

prepare:
NA

execute:
policy("unit_compare.cf","K")

output:
report("Assertion is true")

cleanup:
NA
}

################################################################

COUNTCLASSESMATCHING
{
class:
top10

prepare:
file("unit_countclassesmatching.cf",EXISTS)

execute:
policy("unit_countclassesmatching.cf","K")

output:
report("Found 3 classes matching cf.*")

cleanup:
NA
}

################################################################

COUNTLINESMATCHING
{
class:
top10

prepare:
file("unit_countlinesmatching.cf",EXISTS)
file("countlinesmatching.txt", CREATE)
appendLine("Hello test","countlinesmatching.txt")
appendLine("Hello test test","countlinesmatching.txt")
appendLine("Hello testing","countlinesmatching.txt")
appendLine("test Hellynr","countlinesmatching.txt")
appendLine("Testing Hello","countlinesmatching.txt")

execute:
policy("unit_countlinesmatching.cf","K")

output:
report("Found 3 lines matching")

cleanup:
file("countlinesmatching.txt", DELETE)
}
################################################################
CREATE_FILEDIR
{
 class:
 top10
 
 prepare:
 dir("create_dir", NOTEXISTS)
 file("create_file.tmp", NOTEXISTS)
 
 execute:
 policy("unit_create_filedir.cf","K")
 
 output:
 dir("create_dir", EXISTS)
 file("create_file.tmp", EXISTS)
 
 cleanup:
 dir("create_dir", DELETE)
 file("create_file.tmp", DELETE)
}

################################################################

DISABLE_AND_ROTATE_FILES
{
 class:
 top10
 
 prepare:
 file("disableme", CREATE)
 file("rotateme", CREATE)
 
 execute:
 policy("unit_disable_and_rotate_files.cf","K")
 
 output:
 file("disableme_blownaway", EXISTS)
# file("disableme", NOTEXISTS) # not working
 file("rotateme", EXISTS)
 file("rotateme.1", EXISTS)
 
 cleanup:
 file("disableme_blownaway", DELETE)
 file("rotateme", DELETE)
 file("rotateme.1", DELETE)
}

################################################################
DISKFREE
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("unit_diskfree.cf","K")
 
 output:
 report("Freedisk [0-9]+")
 
 cleanup:
 
}

################################################################
EDIT_COLUMN_FILES
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("unit_edit_column_files.cf","K")
 
 output:
 addline(".*:.*:.*:.*:.*:/home/dir:.*","passwd")
 addline("mark:.+:.+:one,three,two.*","group")
 
 cleanup:
 NA
}

################################################################

EDIT_INSERT_FUZZYLINES
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("unit_edit_insert_fuzzylines.cf","K")
 
 output:
 addline("    One potato","fuzzylines.tmp")
 file("fuzzylines.tmp.cf-before-edit", EXISTS)

 cleanup:
 file("fuzzylines.tmp.cf-before-edit", DELETE)
 file("fuzzylines.tmp", DELETE)
 
}
################################################################

EDIT_PASSWD_FILE
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("unit_edit_passwd_file.cf","K")
 
 output:
# addline("mark:x:1000:100:Mark Burgess:/home/mark:/bin/bash","mypasswd")
 addline("fred:x:1001:100:Right Said:/home/fred:/bin/bash","mypasswd")
 addline("jane:x:1002:100:Jane Doe:/home/jane:/bin/bash","mypasswd")

 cleanup:
 file("mypasswd", DELETE)
 file("mypasswd.cf-before-edit", DELETE)
 
}

################################################################

EDIT_REPLACESTRING
{
 class:
 top10
 
 prepare:
 file("replacestring.tmp", CREATE)
 appendLine("Hello cf2","replacestring.tmp")
 
 execute:
 policy("unit_edit_replace_string.cf","K")
 
 output:
 addline("Hello cfengine 3","replacestring.tmp")

 cleanup:
 file("replacestring.tmp", DELETE)
 file("replacestring.tmp.cf-before-edit", DELETE)
}

################################################################
EDIT_SETVAR
{
 class:
 top10
 
 prepare:
 file("test_setvar", CREATE)
 
 execute:
 policy("unit_edit_setvar.cf","K")
 
 output:
 addline("variable_1 = value_1","test_setvar")
 addline("variable_2 = value_2","test_setvar")
 cmpenv("PGK_PATH","/tmp")

 cleanup:
 file("test_setvar", DELETE)
 file("test_setvar.cf-before-edit", DELETE)
}

################################################################

UNIT_ENV
{
 class:
 top10
 
 prepare:
 file("test_setvar", CREATE)
 
 execute:
 policy("unit_edit_setvar.cf","K")
 
 output:


 cleanup:
 file("test_setvar", DELETE)
 file("test_setvar.cf-before-edit", DELETE)
}

################################################################