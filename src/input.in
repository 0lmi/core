################################################################

LISTS
{
 class:
 top10
 
 prepare:
NA
 
 execute:
 policy("../tests/units/lists.cf", "K")
 
 output:
reports("../tests/regression_test/tmp/lists.out")
 
 cleanup:
 NA
}

################################################################

# line_exists = line(".*edit variable.*", "../tests/regression_test/tmp/cf3_hello","EXISTS")

# line_exists = line(".*edit variable.*", "../tests/regression_test/tmp/cf3_hello","EXISTS")


################################################################

ACCESSED_BEFORE
{
class:
top10

prepare:     
file ("../tests/regression_test/tmp/earlier",ACCESS); 
file ("../tests/regression_test/tmp/later",ACCESS)

execute:
policy("../tests/units/unit_accessed_before.cf","K")

output:
report("The earlier file has been accessed before the later")

cleanup:
file ("../tests/regression_test/tmp/earlier",DELETE) 
file ("../tests/regression_test/tmp/later",DELETE)
}

################################################################

BACKREFERENCES_FILES
{
class:
top10

prepare:
NA
file ("../tests/regression_test/tmp/cf3_hello",CREATE); 

execute:
policy("../tests/units/unit_backreferences_files.cf","KI")

output:
addline("private edit variable is .*","../tests/regression_test/tmp/cf3_hello")
#file("../tests/regression_test/tmp/cf3_hello.cf-before-edit",EXISTS)


 cleanup:
 file("../tests/regression_test/tmp/cf3_hello", DELETE)
 file("../tests/regression_test/tmp/cf3_hello.cf-before-edit", DELETE)

}

################################################################

ARRAYS
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_arrays.cf", "K")

output:
report("Global ([a-z]+) and ([a-z]+)")

cleanup:
NA
}

################################################################

#killprocess("test")
#     info(".*Transformer .*")     
################################################################
SELECT_MODE
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_select_mode.cf", "KI")

output:
info(".*DETECTED.*")

cleanup:
NA
}

###############################################################

INSERT_USERS
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_insert_users.cf", "K")

output:
adduser("mark")

cleanup:
NA
}

################################################################
	
INSERT_LINES
{
class:
top10

prepare:
file("../tests/units/", EXISTS)

execute:
policy("../tests/units/insert_lines.cf", "K")

output:       

# used as: addlines("template_file", "modified_file")
addlines("../tests/regression_test/tmp/insert_lines.out","../tests/regression_test/tmp/insert_lines.actual")

#lines("../tests/regression_test/tmp/test_template","../tests/regression_test/tmp/test","EXISTS")

cleanup:
file("../tests/regression_test/tmp/insert_lines.actual", DELETE)
}

################################################################

# killprocess

################################################################
	
UNIT_ACL
{
class:
top10

prepare:
file("../tests/regression_test/tmp/unit_acl.tmp", CREATE)

execute:
policy("../tests/units/unit_acl.cf", "K")

output:       
checkfileperms ("../tests/regression_test/tmp/unit_acl.tmp","0755")

cleanup:
file("../tests/regression_test/tmp/unit_acl.tmp", DELETE)
}

################################################################
	
UNIT_FILEPERMS
{
class:
top10

prepare:
file("../tests/regression_test/tmp/unit_fileperms.tmp", CREATE)

execute:
policy("../tests/units/unit_fileperms.cf", "K")

output:       
checkfileperms ("../tests/regression_test/tmp/unit_fileperms.tmp","0755")
checkowner("../tests/regression_test/tmp/unit_fileperms.tmp","bishwa")
  # Check Get the file owner
  
cleanup:
file("../tests/regression_test/tmp/unit_fileperms.tmp", DELETE)
}

################################################################
# this is a negative test
UNIT_FILES_NOT_EXIST
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_filesexist.cf", "K")

output:
report("Does not yet exist")

cleanup:
NA
}
################################################################

UNIT_FILESEXIST
{
class:
top10

prepare:
file("../tests/regression_test/tmp/a", CREATE)
file("../tests/regression_test/tmp/b", CREATE)
file("../tests/regression_test/tmp/c", CREATE)

execute:
policy("../tests/units/unit_filesexist.cf", "K")

output:
report("File does exist")

cleanup:
file("../tests/regression_test/tmp/a", DELETE)
file("../tests/regression_test/tmp/b", DELETE)
file("../tests/regression_test/tmp/c", DELETE)
}
################################################################
# this is a negative test
UNIT_FILES_NOT_EXIST2
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_filesexist2.cf", "K")

output:
report("Does not yet exist")

cleanup:
NA
}
################################################################

UNIT_FILESEXIST2
{
class:
top10

prepare:
file("../tests/regression_test/tmp/x", CREATE)
file("../tests/regression_test/tmp/y", CREATE)
file("../tests/regression_test/tmp/z", CREATE)

execute:
policy("../tests/units/unit_filesexist2.cf", "K")

output:
report("File does exist")

cleanup:
file("../tests/regression_test/tmp/x", DELETE)
file("../tests/regression_test/tmp/y", DELETE)
file("../tests/regression_test/tmp/z", DELETE)
}

################################################################

UNIT_FILENAMES
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_filenames.cf", "K")

output:
file("../tests/regression_test/tmp/etc/passwd", EXISTS)

cleanup:
file("../tests/regression_test/tmp/etc/passwd", DELETE)
file("../tests/regression_test/tmp/etc/", DELETE)

}

################################################################
CHANGED_BEFORE
{
class:
top10

prepare:
file ("../tests/regression_test/tmp/later.tmp", ACCESS)
file ("../tests/regression_test/tmp/earlier.tmp", ACCESS);

execute:
policy("../tests/units/unit_changedbefore.cf","K")

output:
report("Earlier than later!")

cleanup:
file ("../tests/regression_test/tmp/earlier.tmp",DELETE)
file ("../tests/regression_test/tmp/later.tmp",DELETE)
}

################################################################

CHDIR
{
class:
top10

prepare:
file ("../tests/regression_test/tmp/chdir.out", EXISTS)

execute:
policy("../tests/units/unit_chdir.cf","K")

output:
reports("../tests/regression_test/tmp/chdir.out")

cleanup:
NA
}

################################################################
CLASSES_GLOBAL
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_classes_global.cf","K")

output:
report("Success")

cleanup:
NA
}

################################################################
CLASSMATCH
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_classmatch.cf","K")

output:
report("Host matches pattern")

cleanup:
NA
}

################################################################

CLASSVAR_CONVERGENCE
{
class:
top10

prepare:
file ("../tests/regression_test/tmp/classvar_convergence.out", EXISTS)

execute:
policy("../tests/units/unit_classvar_convergence.cf","K")

output:
reports("../tests/regression_test/tmp/classvar_convergence.out")

cleanup:
NA
}

################################################################

COMPARE
{
class:
top10

prepare:
NA

execute:
policy("../tests/units/unit_compare.cf","K")

output:
report("Assertion is true")

cleanup:
NA
}

################################################################

COPY_EDIT
{
class:
top10

prepare:
file("../tests/regression_test/tmp/source-template",EXISTS)
file("../tests/regression_test/tmp/staging-file",NOTEXISTS)
file("../tests/regression_test/tmp/copy_edit.out",EXISTS)

execute:
policy("../tests/units/unit_copy_edit.cf","K")

output:
file("../tests/regression_test/tmp/staging-file",EXISTS)
#file("../tests/regression_test/tmp/staging-file.cfsaved",EXISTS)
#file("../tests/regression_test/tmp/final-file.cf-before-edit",EXISTS)
addlines("../tests/regression_test/tmp/copy_edit.out","../tests/regression_test/tmp/final-file")

cleanup:
file("../tests/regression_test/tmp/staging-file",DELETE)
file("../tests/regression_test/tmp/staging-file.cfsaved",DELETE)
file("../tests/regression_test/tmp/final-file.cf-before-edit",DELETE)
}

################################################################
COPYLINKS
{
class:
top10

prepare:
file("../tests/regression_test/tmp/copylinks_from",EXISTS)

execute:
policy("../tests/units/unit_copylinks.cf","K")

output:
file("../tests/regression_test/tmp/copylinks_to",EXISTS)
islink("../tests/regression_test/tmp/copylinks_to")
#file("../tests/regression_test/tmp/final-file.cf-before-edit",EXISTS)
#addlines("../tests/regression_test/tmp/copy_edit.out","../tests/regression_test/tmp/final-file")

cleanup:
file("../tests/regression_test/tmp/copylinks_to",DELETE)
}

################################################################

COUNTCLASSESMATCHING
{
class:
top10

prepare:
file("../tests/units/unit_countclassesmatching.cf",EXISTS)

execute:
policy("../tests/units/unit_countclassesmatching.cf","K")

output:
report("Found 3 classes matching cf.*")

cleanup:
NA
}

################################################################

COUNTLINESMATCHING
{
class:
top10

prepare:
file("../tests/units/unit_countlinesmatching.cf",EXISTS)
file("../tests/regression_test/tmp/countlinesmatching.txt", CREATE)
appendLine("Hello test","../tests/regression_test/tmp/countlinesmatching.txt")
appendLine("Hello test test","../tests/regression_test/tmp/countlinesmatching.txt")
appendLine("Hello testing","../tests/regression_test/tmp/countlinesmatching.txt")
appendLine("test Hellynr","../tests/regression_test/tmp/countlinesmatching.txt")
appendLine("Testing Hello","../tests/regression_test/tmp/countlinesmatching.txt")

execute:
policy("../tests/units/unit_countlinesmatching.cf","K")

output:
report("Found 3 lines matching")

cleanup:
file("../tests/regression_test/tmp/countlinesmatching.txt", DELETE)
}
################################################################
CREATE_FILEDIR
{
 class:
 top10
 
 prepare:
 dir("../tests/regression_test/tmp/create_dir", NOTEXISTS)
 file("../tests/regression_test/tmp/create_file.tmp", NOTEXISTS)
 
 execute:
 policy("../tests/units/unit_create_filedir.cf","K")
 
 output:
 dir("../tests/regression_test/tmp/create_dir", EXISTS)
 file("../tests/regression_test/tmp/create_file.tmp", EXISTS)
 
 cleanup:
 dir("../tests/regression_test/tmp/create_dir", DELETE)
 file("../tests/regression_test/tmp/create_file.tmp", DELETE)
}

################################################################

DISABLE_AND_ROTATE_FILES
{
 class:
 top10
 
 prepare:
 file("../tests/regression_test/tmp/disableme", CREATE)
 file("../tests/regression_test/tmp/rotateme", CREATE)
 
 execute:
 policy("../tests/units/unit_disable_and_rotate_files.cf","K")
 
 output:
 file("../tests/regression_test/tmp/disableme_blownaway", EXISTS)
# file("../tests/regression_test/tmp/disableme", NOTEXISTS) # not working
 file("../tests/regression_test/tmp/rotateme", EXISTS)
 file("../tests/regression_test/tmp/rotateme.1", EXISTS)
 
 cleanup:
 file("../tests/regression_test/tmp/disableme_blownaway", DELETE)
 file("../tests/regression_test/tmp/rotateme", DELETE)
 file("../tests/regression_test/tmp/rotateme.1", DELETE)
}

################################################################
DISKFREE
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("../tests/units/unit_diskfree.cf","K")
 
 output:
 report("Freedisk [0-9]+")
 
 cleanup:
 
}

################################################################
DOLLAR
{
 class:
 top10
 
 prepare:
 file("../tests/regression_test/tmp/dollar.out", EXISTS)
 
 execute:
 policy("../tests/units/unit_dollar.cf","K")
 
 output:
 reports("../tests/regression_test/tmp/dollar.out")
 
 cleanup:
 NA
}

################################################################
EDIT_COLUMN_FILES
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("../tests/units/unit_edit_column_files.cf","K")
 
 output:
 addline(".*:.*:.*:.*:.*:/home/dir:.*","../tests/regression_test/tmp/passwd")
 addline("mark:.+:.+:one,three,two.*","../tests/regression_test/tmp/group")
 
 cleanup:
 NA
}

################################################################

DELETENOTMATCH
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("../tests/units/unit_edit_deletenotmatch.cf","K")
 
 output:
 addlines("../tests/regression_test/tmp/deletenotmatch.out","../tests/regression_test/tmp/passwd")
 
 cleanup:
 NA
}

################################################################

EDIT_INSERT_FUZZYLINES
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("../tests/units/unit_edit_insert_fuzzylines.cf","K")
 
 output:
 addline("    One potato","../tests/regression_test/tmp/fuzzylines.tmp")
 file("../tests/regression_test/tmp/fuzzylines.tmp.cf-before-edit", EXISTS)

 cleanup:
 file("../tests/regression_test/tmp/fuzzylines.tmp.cf-before-edit", DELETE)
 file("../tests/regression_test/tmp/fuzzylines.tmp", DELETE)
 
}

################################################################

EDIT_INSERT_LINES_SILLY
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("../tests/units/unit_edit_insert_lines_silly.cf","K")
 
 output:
 addlines("../tests/regression_test/tmp/sillylines.out","../tests/regression_test/tmp/sillylines.tmp")
 file("../tests/regression_test/tmp/sillylines.tmp.cf-before-edit", EXISTS)

 cleanup:
 file("../tests/regression_test/tmp/sillylines.tmp.cf-before-edit", DELETE)
 file("../tests/regression_test/tmp/sillylines.tmp", DELETE)
 
}

################################################################

EDIT_INSERT_LINES_SILLY
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("../tests/units/unit_edit_insert_lines_silly.cf","K")
 
 output:
 addlines("../tests/regression_test/tmp/sillylines.out","../tests/regression_test/tmp/sillylines.tmp")
 file("../tests/regression_test/tmp/sillylines.tmp.cf-before-edit", EXISTS)

 cleanup:
 file("../tests/regression_test/tmp/sillylines.tmp.cf-before-edit", DELETE)
 file("../tests/regression_test/tmp/sillylines.tmp", DELETE)
 
}

################################################################

EDIT_PASSWD_FILE
{
 class:
 top10
 
 prepare:
 NA
 
 execute:
 policy("../tests/units/unit_edit_passwd_file.cf","K")
 
 output:
# addline("mark:x:1000:100:Mark Burgess:/home/mark:/bin/bash","../tests/regression_test/tmp/mypasswd")
 addline("fred:x:1001:100:Right Said:/home/fred:/bin/bash","../tests/regression_test/tmp/mypasswd")
 addline("jane:x:1002:100:Jane Doe:/home/jane:/bin/bash","../tests/regression_test/tmp/mypasswd")

 cleanup:
 file("../tests/regression_test/tmp/mypasswd", DELETE)
 file("../tests/regression_test/tmp/mypasswd.cf-before-edit", DELETE)
 
}

################################################################

EDIT_REPLACESTRING
{
 class:
 top10
 
 prepare:
 file("../tests/regression_test/tmp/replacestring.tmp", CREATE)
 appendLine("Hello puppet","../tests/regression_test/tmp/replacestring.tmp")
 
 execute:
 policy("../tests/units/unit_edit_replace_string.cf","K")
 
 output:
 addline("Hello cfengine 3","../tests/regression_test/tmp/replacestring.tmp")

 cleanup:
 file("../tests/regression_test/tmp/replacestring.tmp", DELETE)
 file("../tests/regression_test/tmp/replacestring.tmp.cf-before-edit", DELETE)
}

################################################################
EDIT_SETVAR
{
 class:
 top10
 
 prepare:
 file("../tests/regression_test/tmp/test_setvar", CREATE)
 
 execute:
 policy("../tests/units/unit_edit_setvar.cf","K")
 
 output:
 addline("variable_1 = value_1","../tests/regression_test/tmp/test_setvar")
 addline("variable_2 = value_2","../tests/regression_test/tmp/test_setvar")
 cmpenv("PGK_PATH","/tmp")

 cleanup:
 file("../tests/regression_test/tmp/test_setvar", DELETE)
 file("../tests/regression_test/tmp/test_setvar.cf-before-edit", DELETE)
}

################################################################

UNIT_ENV
{
 class:
 top10
 
 prepare:
 file("../tests/regression_test/tmp/test_setvar", CREATE)
 
 execute:
 policy("../tests/units/unit_edit_setvar.cf","K")
 
 output:


 cleanup:
 file("../tests/regression_test/tmp/test_setvar", DELETE)
 file("../tests/regression_test/tmp/test_setvar.cf-before-edit", DELETE)
}

################################################################