#######################################################
#
# Acceptance tests for #4070
# This is the adjunct for 001.cf
# This policy first clears the global test directory
# and then purposely creates a directory with the same
# name as the directory that would be created by
# cfengine as a backup file when a backup
# location is supplied and a files promise
# causes a backed up file to be changed
# This simulates a corner case where the intended 
# backup location and contained file(s) would be 
# the same as a pre-existing directory of the same
# name as one of the files contained in the backup
# directory
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}


#######################################################

bundle agent init
{
 
 #######################################
 #Clean up test directory before testing
 #######################################
 
files:
    "$(G.testdir)/."
    depth_search => recurse("inf"),
    delete => tidy,
    file_select => all,
    classes => if_ok("dir_purged");

commands:
    dir_purged::
        "$(G.mkdir) -p"
        args => "$(G.testdir)/backup/_tmp_TEST_cfengine_test";
}

body edit_defaults empty
{
   empty_file_before_editing => "true";
   edit_backup => "false";
}

bundle edit_line test_insert(str)
{
    insert_lines:
        "$(sys.date)";
}

body delete tidy

{
  dirlinks => "delete";
  rmdirs   => "true";
}

body depth_search recurse(d)

{
depth => "$(d)";
xdev  => "true";
}

body file_select all
{

    leaf_name => { ".*" };
    file_result => "leaf_name";
}


#######################################################

bundle agent test
{
  files:     
    agent_ran::
     "$(G.testdir)/test"
     edit_line => test_insert("inserted text"),
     classes => if_ok("file_edited");

  commands:
      "$(sys.cf_agent)"
      args => "-f $(this.promise_filename).sub -K",
      classes => if_ok("agent_ran");
    
  file_edited::
      "$(sys.cf_agent)"
      args => "-f $(this.promise_filename).sub -K -D SECOND_RUN",
      classes => classes_generic("agent_ran_test"), 
      contain => test_timeout;  
      
}

body contain test_timeout
{
    exec_timeout => "2";
}

body classes classes_generic(x)
# Define x prefixed/suffixed with promise outcome
{
  promise_repaired => { "promise_repaired_$(x)", "$(x)_repaired", "$(x)_ok", "$(x)_reached" };
  repair_failed => { "repair_failed_$(x)", "$(x)_failed", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
  repair_denied => { "repair_denied_$(x)", "$(x)_denied", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
  repair_timeout => { "repair_timeout_$(x)", "$(x)_timeout", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
  promise_kept => { "promise_kept_$(x)", "$(x)_kept", "$(x)_ok", "$(x)_not_repaired", "$(x)_reached" };
}

body classes if_ok(x)
{
   promise_repaired => { "$(x)" };
   promise_kept => { "$(x)" };
}

#######################################################

bundle agent check
{
  
  classes:
    "ok" expression => fileexists("$(G.testdir)/SECOND_RUN");

  reports:
    ok::
        "$(this.promise_filename) Pass";
    !ok::    
        "$(this.promise_filename) FAIL";
    
}

