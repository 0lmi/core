#######################################################
#
# Test that mergedata works with list iteration
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
}

#######################################################

bundle agent test_1
{
  vars:
    "hosts"
      meta => { "hosts" },
      data => parsejson('{"10.100.250.11": [ "slot2" ], "10.100.250.10": [ "slot1" ]}');
}

bundle agent test_2
{
  vars:
    "hosts"
      meta => { "hosts" },
      data => parsejson('{"10.100.250.11": [ "cflin111" ], "10.100.250.10": [ "cflin110" ]}');
}
bundle common test
{
  vars:
    "variables" slist => variablesmatching(".*", "hosts");
    "sorted_vars" slist => sort("variables", "lex");

    "merged" data => mergedata("$(sorted_vars)");

    "result" string => format("%S", "merged");
}


#######################################################

bundle agent check
{
  vars:
    "expected" string => '{"10.100.250.11":["cflin111"],"10.100.250.10":["cflin110"]}';

  classes:
      "ok" expression => strcmp($(test.result), $(check.expected)); 

  reports:
    DEBUG::
      "Expected: '$(check.expected)'";
      "Result:   '$(test.result)'";
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
