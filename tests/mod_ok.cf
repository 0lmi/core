


 TO DO NOW _ fill in the the type tree for main syntax,  server bundles, etc



#
# A simple file with a body reference
#

bundle agent testbundle

{
vars:

  "testscalar1" string => "one";
  "testscalar2" string => "two";

  "testlist1" -> "me"   slist  => { "mark", "kyrre", "aeleen" };

  "testlist2"    slist  => { "alpha", "beta", "gamma" };

  "theint" int => randomint(3,6);

  "myint"  string => "random number $(theint)";

files:


       "/path/file4$(testscalar1).*" -> { @(testlist1), "mum", $(testscalar1) },

            access      => myaccess("$(testlist1)"),
            name_select=> "fish.*",

            recurse     => getuid("1000");

       #
       # list substitutions in bodies are treated as literals
       #

       "/path/file5.*" 

            access      => myaccess($(testlist1)),
            recurse     => "inf";


#
# Currently if a type is undefined it is allowed here as long as syntax is ok
# but it should not be executable... is this useful?
#

admit:

 "/etc/passwd" -> "nexus";
}

#########################################################

body access myaccess(var)

{
any::

  mode  => "+077,-02";

  owner => { "mark","siri" };

solaris::

  group => { "$(var)123", "456", "$(var)567" };

linux::

    #
    # The semantics of this direct substitution $(var)
    # is to assume a simple literal string atoms
    #

  group => { "mark2", $(var), "$(myint)" };

group => @(testlist1);

}

#########################################################

bundle server main

{
vars:

 "list" slist => { "192.168.0.4", "myhost.example.com" };

admit:

 "/etc/passwd"   -> @(testbundle.testlist1);
 "/etc/services" -> @(testlist2);

}

