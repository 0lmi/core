\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename st-novareportarch.info
@settitle The Nova Report Architecture
@setchapternewpage odd
@c %** end of header

@titlepage
@title The Nova Report Architecture
@subtitle A CFEngine Special Topics Handbook
@author CFEngine AS


@page

@cartouche
@quotation
In the default set-up, CFEngine Nova is a star network and uses
bidirectional communication on port @code{5308} between the policy hub
and client hosts.

However, Nova does not require network at all --- you can manage and
track your systems with a usb-stick if you wish.
@end quotation
@end cartouche

@vskip 0pt plus 1filll
Copyright @copyright{} 2011 CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                      CFEngine is a language based tool specifically
                      designed for configuring and maintaining
                      Unix-like operating systems attached
                      to a TCP/IP network.
@end direntry
@end ifinfo

@ifnottex
@node  reportarch
@top The Nova Report Architecture
@menu
@end menu



@end ifnottex
@iftex
@contents
@end iftex

@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
<h2>Summary of contents</h2>
@end html
@end ifhtml

@node  How are reports collected?
@unnumberedsec How are reports collected?
@sp 1

In CFEngine Nova, hosts are normally managed with policy deployed in
@file{/var/cfengine/masterfiles} at the policy hub. Once the policy
hub is set up, new clients are easily added by bootstrapping them
using the ip-address of the policy hub.

Each time a new host bootstraps to the policy hub, it pulls down the
policy and the policy hub notes the connection in its last-seen
database (this database is available as a report in the Nova Mission
Portal).

By using the last-seen database, the policy hub registers which hosts
it should query for reports. The @code{cf-hub} component of Nova runs
as a daemon and regularly queries each host for reports, using port
@code{5308} by default (configurable in @code{body hub control}). The
reports are stored into a @code{mongodb} database on the policy hub.

@center @image{novaarch,8cm,,Nova Report Architecture,eps}

Note that by design, CFEngine only allows pull as mode of
communication.

@node  When are reports transferred?, , How are reports collected?
@unnumberedsec When are reports transferred?
@sp 1

It is the @code{cf-hub} component on the policy hub that schedules
report collection. There are two types of reports --- @code{delta} and
@code{full}. @code{delta} is transferred every five minutes, while
@code{full} is transferred every six hours. This schedule can be
changed in @code{body hub control}.

@code{delta} includes the reports from the last ten minutes, while
full includes reports from the last week. Also, @code{full} includes
some large, more static reports like the software installed reports.


@node How do I force report collection on the policy hub?, , When are reports transferred?
@unnumberedsec How do I force report collection on the policy hub?
@sp 1

If you have network connectivity to a client host from the policy hub,
you can gather reports manually by running @code{cf-runagent -H
CLIENTIP -q full} on the policy hub. Fill in @code{CLIENTIP} with the
real ip-address of the client host. You may also collect delta reports
if you wish. Running this in verbose mode (@code{-v}) may help
debugging issues where reports do not show up in the Mission Portal.


@node  What is the size of a report batch from a host?, , How do I force report collection on the policy hub?
@unnumberedsec What is the size of a report batch from a host?
@sp 1

This depends on the policy and the amount of reports the host
generates, but usually delta reports are a few kilobytes and full
reports are a few hundred kilobytes.


@node  Can I export reports from a host into a file?, , What is the size of a report batch from a host?
@unnumberedsec Can I export reports from a host into a file?
@sp 1

Yes, this can be done by running @code{cf-report -x full} on the
client host. The output file will be written to
@code{/var/cfengine/reports/nova_export.nov}. You may also use
@code{cf-report -x delta}, but then you must make sure to transfer and
import the file much more frequently.


@node How do I import a report file into the policy hub?, , Can I export reports from a host into a file?
@unnumberedsec How do I import a report file into the policy hub?
@sp 1

Copy the file generated by the export command at the client to the
policy hub, using any mechanism. At the policy hub, run the following
command @code{cf-report -i FILEPATH}, where @code{FILEPATH} is the
path to the file generated by the client host. After this step, the
client should show up in the Nova Mission Portal web interface.

Also, the Mission Portal will show when the last data was imported
from a client when viewing the client's host page.

@node How often should I import the reports?,  , How do I import a report file into the policy hub?
@unnumberedsec How often should I import the reports?
@sp 1

A @code{full} import should be done at least every six hours from each
client host. For @code{delta} imports to be useful, they should be
done at least every ten minutes.

Doing them more often will not harm --- duplicate entries are
automatically detected.


@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https:// 
ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google- 
analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye

