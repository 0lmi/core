\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CfengineLogo} 

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename cf-QuickRef2.info
@settitle Quick References Guide
@setchapternewpage odd
@c %** end of header

@smallbook
@titlepage
@title Quick References Guide
@subtitle A cfengine AS workbook
@author cfengine AS


    

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2008 Cfengine AS

@end titlepage


@c *************************** File begins here ************************

@ifnottex
@node Top, , (dir), (dir)
@top Cfengine-Reference
@end ifnottex

@ifinfo
@dircategory Cfengine Training
@direntry
* cfengine Modularization:
                        Cfengine is a language based tool specifically
                        designed for configuring and maintaining
                        Unix-like operating systems attached
                        to a TCP/IP network.
@end direntry
@end ifinfo


@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>

<h2>Summary of contents</h2>

@end html
@end ifhtml

@c **********************************************************************
@c CHAPTER
@c **********************************************************************

@menu
* Command reference::           
@end menu

@node Command reference,  , Top, Top
@chapter Command reference


@menu
* Cfagent command options::     
* Cfservd command options::     
* Cfexecd command options::     
* Cfenvd command options::      
* Cfrun command options::       
* cfenvgraph::                  
* cfshow::                      
* cfkey::                       
@end menu

@node  Cfagent command options, Cfservd command options, Command reference, Command reference
@section cfagent command options


@noindent Note that GNU long options are available with the syntax
@code{--longoption}.  The long names are given in brackets.
 

@table @samp 
@item -a 
(@code{--sysadm}) Print only the name of the system administrator then quit.


@item -A
(@code{--auto}) Can be used to signify an automatic run of cfengine, as opposed
to a manual run. The distinction is not predetermined. Use of this option
currently causes cfengine to ignore locks. This option is reserved for future
development.

@item -b
(@code{--force-net-copy}) Normally cfengine detects attempts to copy
from a server via the network that will loop back to the localhost.
It then avoids using the network to make the copy. This option forces
cfengine to copy using the network. @emph{Yes, someone thinks this is useful!}

@item -c 
(@code{--no-check-files}) Do not check file systems for ownership / permissions etc.

@item -C 
(@code{--no-check-mounts}) Check mount points for consistency.  If this
option is specified then directories which lie in the ``mount point''
area are checked to see whether there is anything mounted on them.
Normally this is @emph{off} since not all machines use mounted file
systems in the same way.  e.g.  HPUX does not generally operate with
partitions, but nevertheless one might wish to mimick a partition-like
environment there, but it would be irritating to be informed that
nothing was mounted on the mount point.

@item -d 
(@code{--debug}) Enable debugging output.  Normally you will want to
send this to a file using the shell script command or a pipe.
 -d1 shows only parsing output.  -d2 shows only
runtime action output.  -d0 shows both levels. Debugging ouput is
intended mainly for the author's convenience and is not a supported
feature. The details of this output may change at any time.

@item -D 
(@code{--define}) Define a compound class symbol of the form
@emph{alpha.beta.gamma}.

@item -e
(@code{--no-edits}) Suppress file editing.

@item -E
(@code{--enforce-links}) Globally force links to be created where plain
files or links already exist. Since this option
is a big hammer, you have to use it in interactive mode and
answer a yes/no query before cfengine will run like this.

@item -f 
(@code{--file}) Parse filename after this switch.  By default cfengine
looks for a file called @emph{cfengine.conf} in the current directory.
 
@item -g
(@code{--check-contradictions}) Never implemented.

@item -h  
(@code{--help}) Help information.  Display version banner and options
summary.

@item -H
(@code{--no-hard-classes}). Prevents cfengine from generating any built-in
class name information. Can be used for emulation purposes.
@cindex Internal classes, switching off
@cindex Switching off built-in classes
 
@item -i 
(@code{--no-ifconfig}) Do not attempt to configure the local area
network interface.

@item -I
(@code{--inform}) Switches on the inform output level, whereby cfengine
reports everything it changes..

@item -j
(@code{--just}) Executed only named action types.
@smallexample
$ cfagent --avoid resolve,copy
$ cfagent --just tidy --just shellcommands
@end smallexample
 
@item -k
(@code{--no-copy}) Do not copy/image any files.

@item -K
(@code{--no-lock}) Ignore locks when running.

@item -l  
(@code{--traverse-links}) Normally cfengine does not follow symbolic
links when recursively parsing directories.  This option will force it
to do so.
 

@item -L
(@code{--delete-stale-links}) Delete links which do not point to
existing files (except in user home directories, which are not touched).

@item -m 
(@code{--no-mount}) Do not attempt to mount file systems or edit the
filesystem table.

@item -M
(@code{--no-modules})
Ignore modules in actionsequence.

@item -n 
(@code{--recon},@code{--dry-run},@code{--just-print}) No action.  Only
print what has to be done without actually doing it.

@item -N 
(@code{--negate},@code{--undefine}) Cancel a set of classes,
or undefine (set value to @emph{false}) a compound class of the form
@emph{alpha.beta.gamma}.

@item -o 
(@code{--avoid}) Do not execute named action types.
@smallexample
$ cfagent --avoid resolve,copy
$ cfagent --just tidy --just shellcommands
@end smallexample

@item -p 
(@code{--parse-only}) Parse file and then stop.  Used for checking the
syntax of a program.  You do not have to be superuser to use this
option.

@item -P
(@code{--no-processes}) Do not execute the processes action.

@item -q
(@code{--no-splay}) Switch off host splaying (sleeping).

@item -Q
(@code{--query}) Query the values of the comma separated list of variable names.

@item -s 
(@code{--no-commands}) Do not execute scripts or shell commands.

@item -S 
(@code{--silent}) Silence run time warnings.

@item -t 
(@code{--no-tidy}) Do not tidy file systems.

@item -u
(@code{--use-env}) Causes cfengine to generate an environment variable
@samp{CFALLCLASSES} which can be read by child processes (scripts). This
variable contains a summary of all the currently defined classes at any
given time. This option causes some System V systems to generate a Bus
Error or segmentation fault. The same information is available from the
cfengine built-in variable @code{$(allclasses)} and can be passed as a
parameter to scripts.

When this variable grows too large for embedding one can also access a complete
list of current classes in @file{/var/cfengine/state/allclasses}.

@item -U
(@code{--underscore-classes}). When this option is set, cfengine adds
an underscore to the beginning of the hard system classes (like @code{_sun4}, @code{_linux}
etc. The longer compound classes are not underscored, since these are already
complex and would unlikely result in collisions.) This can be used to avoid naming conflicts if you are so
unjudicious as to name a host by the name of a hard class. Other classes
are not affected.

@item -v  
(@code{--verbose}) Verbose mode.  Prints detailed information about
actions and state.

@item -V 
(@code{--version}) Print only the version string and then quit.

@item -w 
(@code{--no-warn,--quiet},@code{--quiet}) Do not print warning messages.

@item -W
(@code{--csdb}) Print the name of the current checksum database.

@item -x
(@code{--no-preconf}) Do not execute the @file{cf.preconf} net
configuration file.

@item -X
(@code{--no-links}) Do not execute the @code{links} section of a
program.


@item -z
(@code{--zone-info}) Print variable data

@item -Z
(@code{--method}) Execute a method as a sub-process.
@end table



@c **********************************************************************
@c SECTION
@c **********************************************************************

@node  Cfservd command options, Cfexecd command options, Cfagent command options, Command reference
@section cfservd command options

@noindent Note that GNU long options are available with the syntax
@code{--longoption}.  The long names are given in brackets.
 
@table @samp
@item -d
(@code{debug}) Set debugging ouput. e.g. -d2
@item -f
(@code{file}) Set name of input file instead to default @file{cfservd.conf}.
@item -F
(@code{no-fork}) Do not run in background (daemon mode).
@item -h
(@code{help}) Print help info.
@item -L
(@code{ld-library-path}) Set the internal @code{LD_LIBRARY_PATH} variable.
@item -p
(@code{parse-only}) Only parse configuration, do not run.
@item -v
(@code{verbose}) Run in verbose mode. Should be combined with @samp{-F} for debugging.
@end table


@c **********************************************************************
@c SECTION
@c **********************************************************************

@node  Cfexecd command options, Cfenvd command options, Cfservd command options, Command reference
@section cfexecd command options

@noindent Note that GNU long options are available with the syntax
@code{--longoption}.  The long names are given in brackets.

@table @samp
@item -1
(@code{once}) Run once only, now. Do not run in background (daemon mode).
@item -d
(@code{debug}) Set debugging ouput. e.g. -d2
@item -f
(@code{file}) Set name of input file instead to default @file{cfservd.conf}.
@item -F
(@code{no-fork}) Do not run in background (daemon mode).
@item -g
(@code{foreground}) Do not run in background (daemon mode).
@item -h
(@code{help}) Print help info.
@item -L
(@code{ld-library-path}) Set the internal @code{LD_LIBRARY_PATH} variable.
@item -p
(@code{parse-only}) Only parse configuration, do not run.
@item -v
(@code{verbose}) Run in verbose mode. Should be combined with @samp{-F} for debugging.
@end table


@c **********************************************************************
@c SECTION
@c **********************************************************************

@node  Cfenvd command options, Cfrun command options, Cfexecd command options, Command reference
@section cfenvd command options

@noindent Note that GNU long options are available with the syntax
@code{--longoption}.  The long names are given in brackets.

@table @samp
@item -d
(@code{debug}) Set debugging ouput. e.g. -d2
@item -F
(@code{no-fork}) Do not run in background (daemon mode).
@item -h
(@code{help}) Print help info.
@item -H
(@code{help}) Keep histogram data.

@item -T
(@code{help}) Interface with @code{tcpdump} if present on the system.

@item -v
(@code{verbose}) Run in verbose mode. Should be combined with @samp{-F} for debugging.
@end table




@c **********************************************************************
@c SECTION
@c **********************************************************************

@node  Cfrun command options, cfenvgraph, Cfenvd command options, Command reference
@section cfrun command options

@noindent Note that GNU long options are available with the syntax
@code{--longoption}.  The long names are given in brackets.

@table @samp
@item -d
Set debugging ouput. e.g. -d2
@item -h
Print help info.
@item -S
Run silently.
@item -T
Trust all keys offered by remote servers automatically, i.e. suppress manual prompting.
@item -v
Run in verbose mode.
@item --
Separator for forwarding remaining options to remote systems. After the first
@samp{--} come options to send to cfagent on the remote system; after the
second @samp{--} you may list classes that you want to be defined on the remote system
in order to activate parts of the configuration in the manner of role-based access
control.
@smallexample
e.g.  cfrun -- -- linux          Run on all linux machines
      cfrun -- -p                Ping and parse on all hosts
      cfrun host1 host2 -- -p    Ping and parse on named hosts
      cfrun -v -- -p             Ping all, local verbose
      cfrun -v -- -k -- solaris  Local verbose, all solaris, but no copy
@end smallexample
@end table


@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cfenvgraph, cfshow, Cfrun command options, Command reference
@section cfenvgraph

Cfenvgraph is the tool that converts data stored by @code{cfenvd} into
text files that can be used to produce graphs. Use another tool like
@code{gnuplot} or @code{xmgrace} to generate scientific graphs. Use
@code{cfbrain} to perform monitoring based on @code{cfenvd} data.

@table @samp
@item -e
(@code{--no-error-bars}) Plot X,Y only, do not add error bars 
@item -E
(@code{--erasehistory}) A comma separated list of metrics to be erased. The past week's data is not erased.
@item -h
(@code{--help}) Print help message.
@item -f
(@code{--file}) Specify a database other than the default.
@item -n
(@code{--no-scaling}) Do not perform automatic scaling of graphs.
@item -N
(@code{--now}) Plot an expanded view of the past four hours, not a weekly view.
@item -o
(@code{--outputdir}) Set the output directory name.
@item -r
(@code{--resolution}) Plot the data with maximum 5-minute resolution.
@item -s
(@code{--separate}) Plot one graph per metric, instead of all graphs on one trace.
@item -t
(@code{--titles}) Add title data to graph files.
@item -T
(@code{--timestamps}) Add a timestamp to the output directory name in order to keep a history.
@item -v
(@code{--verbose}) Verbose output.
@end table

@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cfshow, cfkey, cfenvgraph, Command reference
@section cfshow

Cfshow is the tool that shows data recorded in cfengine's private
workspace.

@table @samp
@item -a
(@code{--active}) Display any action locks that are currently active.
@item -A
(@code{--audit}) Dump the system auditing history.
@item -c
(@code{--checksum}) Dump the database of cryptographic checksums.
@item -C
(@code{--classes}) Dump the class history of this host.
@item -d
(@code{--debug}) Show debugging output.
@item -f
(@code{--filename}) Change the default database names.
@item -h
(@code{--help}) Show help message.
@item -H
(@code{--html}) Generate output in html.
@item -l
(@code{--locks}) Show the historical database of all action locks.
@item -p
(@code{--performance}) Show data about performance of instrumented actions.
@item -r
(@code{--regex}) Show configuration rules in classes that match the regular expression argument.
@item -s
(@code{--last-seen}) Show the last-seen times of all observed peers.
@item -X
(@code{--xml}) Generate output in XML.
@item -P
(@code{--purge}) Purge data older than one week.
@item -V
(@code{--version}) Output version string.
@item -v
(@code{--verbose}) Verbose output.
@end table

@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cfkey,  , cfshow, Command reference
@section cfkey

Has no options.




@c =========================================================================
@c @node Index,  , Cfengine Methods, Top
@c @unnumbered Concept Index
@c @printindex cp
@c =========================================================================

@ifhtml
@html
<a name="Contents">
@end html
@end ifhtml

@contents

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye
