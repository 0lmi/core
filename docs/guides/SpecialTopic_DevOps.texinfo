\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename st-devops.info
@settitle CFEngine for `DevOps'
@setchapternewpage odd
@c %** end of header

@titlepage
@title CFEngine for `DevOps' and Cloud Developers
@subtitle A CFEngine Special Topics Handbook
@author CFEngine AS


@page

@cartouche
@quotation
Today's Cloud model is about managing re-usable infrastructure
resources; DevOps extends this to manage and customize application
resources. CFEngine handles
deployment, customization and repair at all levels from the operating
platform to the business applications.

CFEngine has the sophistication to enable precise integration
of software systems, and the responsiveness to determine the state of
systems within a few minutes in massive cloud-scale deployments. It
runs on everything from handhelds, to smartphones, to individual servers 
to datacentres, to mainframes and clouds.
@end quotation
@end cartouche

@vskip 2cm

@vskip 0pt plus 1filll
Copyright @copyright{} 2011 CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                      CFEngine is a language based tool specifically
                      designed for configuring and maintaining
                      Unix-like operating systems attached
                      to a TCP/IP network.
@end direntry
@end ifinfo

@ifnottex



@node Top, What is DevOps? , (dir), (dir)
@top Cfengine for Devops
@menu
* What is DevOps? ::            
* Why is DevOps happening now? ::  
* Should Web and IT management be closely related?::  
* How do we make controlled change faster?::  
* What role does CFEngine play in DevOps?::  
* Getting used to declarative expression::  
* Using CFEngine to integrate software components::  
* Cloud computing is a rehearsal::  
@end menu


@end ifnottex
@iftex
@contents
@end iftex

@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
<h2>Summary of contents</h2>
@end html
@end ifhtml

@node  What is DevOps? , Why is DevOps happening now? , Top, Top
@unnumberedsec What is DevOps? 
@sp 1
DevOps is a term coined by Patrick Debois in 2009, from an
amalgamation of Development and Operations. It expresses a
change in the way companies are thinking about IT -- a change from segregated
IT infrastructure to highly integrated platforms.
Leading the way is a group of highly innovative Web-based companies
whose businesses depend on very specific arrangements of
infrastructure. It is about giving software developers more influence
over the IT infrastructure their applications run on, and allowing
change at the same speed as agile development teams.

@node  Why is DevOps happening now? , Should Web and IT management be closely related?, What is DevOps? , Top
@unnumberedsec Why is DevOps happening now? 
@sp 1

The proliferation of Free and Open Source
software has put powerful software components in the hands of a
broader range of developers than ever before -- and businesses
everywhere are exploiting this software by adapting it and combining
it is a wealth of mutations.  This blurs the line between what used to
be development and what used to be the system administrator's domain (operations).
We have entered an age analogous to that of hobby electronics for IT
systems, where we can order off-the-shelf components and build cool
new applications from them anywhere.

After 20 years of scepticism, business and Free Open Source software have
made friends and are working together creatively for the benefit of
willing consumers.
With this basic premise of agility, companies working in this area
naturally embrace a rapid innovation cycle, meaning a fast release
cycle too.  Traditional IT management methods can be perceived as too
slow in such an environment. An important part of DevOps is that it
naturally encompasses the idea of business integration -- or IT
for a purpose.

@node  Should Web and IT management be closely related?, How do we make controlled change faster?, Why is DevOps happening now? , Top
@unnumberedsec Should Web and IT management be closely related?
@sp 1

Web frameworks have seen the rise of languages like PHP, Java, Python
and Ruby, all of which offer frameworks for fast deployment.
Languages that work well for application development are not well
suited to managing infrastructure however: they focus too much on low
level details that one would like to suppress. The fact that
programmers already know the languages does not change this.

An important principle for robustness and stability of systems is weak
coupling between components. This brings flexibility rather than brittle
fragility. Giving programmers direct control over
infrastructure from their applications risks insufficient separation
in which infrastructure management becomes a second-class citizen run
by amateurs who just want to get code out there and don't properly
understand the implications. The System Administrator role exists for
a reason.

Should we use the web and HTTP for everything just because we
know it?  We suggest not. HTTP is an inefficient protocol
for operations. It was designed for 1:1 communication with centralized
certificate verification, not for decentralized 1000000:1
communication, as testified by the extensive need for load balancers
in web farms.

At CFEngine, we believe in lightweight management -- made as simple
as possible, but no simpler.

@node  How do we make controlled change faster?, What role does CFEngine play in DevOps?, Should Web and IT management be closely related?, Top
@unnumberedsec How do we make controlled change faster?
@sp 1

It is important to be able to make changes quickly. Automation can
implement change quickly if humans can get their acts together. Human
IT processes and best practices (e.g. ITIL, COBIT, etc) tend to over
bureaucratize change, leading to unnecessary overhead which frustrates
agile companies.

To be confident and efficient (`less haste more speed'), there needs
to be a model for the system that everyone agrees on. Models compress
information and cache understanding, meaning we have less to talk
about@footnote{Consider, for example, US versus Norwegian legal
systems. In Norway more details are codified into federal law. This
means that there is less to talk about in court and legal proceedings
are much more quickly resolved as there is less need to reinvent
interpretations on the fly.}. Finally, models allow us to make
predictions, so they aid understanding and help us to avoid mistake.

@cartouche
CFEngine's promise model offers a flexible approach to weakly-coupled
autonomous resource configuration. It simultaneously allows efficient,
convergent, and repeatable implementation, and a simple definition of
@i{compliance} with requirements@footnote{For an explanation of convergence,
see the Special Topics Guide on Change Management and Incident Repair.}. All web-based companies using credit
cards will know about the need for PCI-DSS compliance, for instance.
And US-traded companies will know about Sarbanes-Oxley (SOX).
@end cartouche


@node  What role does CFEngine play in DevOps?, Getting used to declarative expression, How do we make controlled change faster?, Top
@unnumberedsec What role does CFEngine play in DevOps?
@sp 1

The challenges for IT management today are about increasing complexity (driven
by the circuitry of online applications) and increasing scale.

CFEngine is not a programming language, but a documentation language
for system state that has the pleasant side effect of enforcing that
state on a continuous basis. It gets away from the idea of `build
automation' to complete lifecycle management. It's continuity is a
natural partner for a rapid development environment, as mistakes can be
quickly fixed on the fly with minimal impact on the system.

CFEngine's wins are that it is massively scalable, very low impact and rich in functionality.
It will not break at a few hundred machines or choke off network communications with
overhead. It will fix practically any well-defined problem within 5 minutes, bringing dependability and
agility.

Knowledge, business integration - metrics

The advantage CFEngine brings is that users can have clear expectations about their
systems at all times. Today's programmers are more sophisticated than script monkeys. 

@node  Getting used to declarative expression, Using CFEngine to integrate software components, What role does CFEngine play in DevOps?, Top
@unnumberedsec Getting used to declarative expression
@sp 1

CFEngine uses a pragmatic mixture of the declarative (functional) and
imperative to represent configurations. Programmers are taught mainly
imperative programming today, so a declarative approach could seem like
a barrier to adoption. The principles are very simple however, and easy for
developers to grasp.

In spite of the focus on readability for documenting @i{intent},
all the familiar structures of imperative programming are, in fact, available
in CFEngine, just optimized for clarity.

@cartouche
The main goals of CFEngine are @i{convergence to a desired state}, @i{repeatability}
and @i{clear intentions}.
@end cartouche

@menu
* Expressing actions or tasks in CFEngine::  
* Expressing conditionals in CFEngine::  
* Expressing loops in CFEngine::  
* Expressing subroutines in CFEngine::  
@end menu

@node  Expressing actions or tasks in CFEngine, Expressing conditionals in CFEngine, Getting used to declarative expression, Getting used to declarative expression
@unnumberedsubsec Expressing actions or tasks in CFEngine
@sp 1

Most of the actionable items have builtin operational support,
which is designed to be convergent and safely repeatable.
To keep declarations clear, CFEngine organizes similar
operations into chapters in a simple separation of concerns.

@example
files:
 @var{"affected object" ...details....}

processes:
 @var{"affected object" ...details....}

@end example
@noindent In general, many such promises and types are collected into bundles, so
that the form is
@cartouche
@example
 bundle agent SomeUserDefinedName
 @{
 type_of_promise:

   @var{"affected object/promiser" 

      body of the promise/details}

  ...
 @}
@end example
@end cartouche
@node  Expressing conditionals in CFEngine, Expressing loops in CFEngine, Expressing actions or tasks in CFEngine, Getting used to declarative expression
@unnumberedsubsec Expressing conditionals in CFEngine
@sp 1

CFEngine uses the idea of contexts (also called classes or class-contexts@footnote{
The term classes was originally used but has since been overloaded with connotations from
Object Orientation, etc, making the term confusing.}) to address declarations to
certain environments. The contexts or classes are written as a prefix, a bit like a
target in a Makefile. They represent known properties of the environment.
@cartouche
@example
 bundle agent SomeUserDefinedName
 @{
 type_of_promise:

   @b{property::}

     @i{make one promise...}

   @b{!property::}

     @i{make a different promise...}
 @}

@end example
@end cartouche
@noindent This is the mechanism by which all decisions are made in CFEngine. Class contexts
are evaluated by @code{cf-agent} and are cached so that they can be used at any time.

How do we know if the property has been evaluated or not? CFEngine evaluates certain
hard-classes by default. In addition, you can probe as many more as you like, as
separate promises. 
@verbatim
 classes:

   "cached_result" expression => fileexists("/some/file");
   "bigger"        and => { isgreaterthan("1","0"), "cached_result" }; 

@end verbatim
This is different from a programming language where you generally make these tests
in-line when you need them. In CFEngine the chance that you need the same test multiple
times is greater, so the determination is separated entirely from the usage.

To go from @i{if-then-else} thinking to using classes, you just need to thihnk about
classes as booleans:
@example
bundle agent Name
@{
classes:

   "cached_result" expression => fileexists("/some/file");
   "bigger"        and => @{ isgreaterthan("1","0"), "cached_result" @}; 

reports:

  @b{bigger::}
    "Bigger is true....";

  @b{cached_result&!bigger::}  
    "Mathematics seems to be awry...";

  # may also be written @b{cached_result.!bigger::}

@}
@end example
These results can then be extended and reused efficiently. 
The class definitions can be hidden away and suitably meaningful class names
replace a lot of redundant syntax.

All the information about class contexts is evaluated at the end-host,
in a decentralized manner avoiding clogging of network communications
that befuddles many centralized approaches. This keeps CFEngine execution
very fast and with a low overhead.

@node  Expressing loops in CFEngine, Expressing subroutines in CFEngine, Expressing conditionals in CFEngine, Getting used to declarative expression
@unnumberedsubsec Expressing loops in CFEngine
@sp 1

Lists and loops go hand in hand, and they are a very effective way of reducing
syntax and simplifying the expression of intent. Saying `do this to all the following'
is generally easier to comprehend than `do this to the first, do this to the next,...' and
so on, because our brains are wired to see patterns.

Thus, loops are as useful for configuration as for programming.  We
only want to simplify the syntax once again to hide redundant words
like `foreach'. To do this, CFEngine makes loops implicit. If you
use a scalar variable reference @samp{$(mylist)} to a list variable
@samp{@@(mylist)}, CFEngine assumes you want to iterate over each
case.
@verbatim
vars:
   "my_list" slist => { "one", "two", "three" };

files:
   "/tmp/file_$(my_list)"
             create => "true";

@end verbatim
@noindent The above evaluates to three promises:
@example
files:

   "/tmp/file_one"
             create => "true";

   "/tmp/file_two"
             create => "true";

   "/tmp/file_three"
             create => "true";

@end example
@noindent Similarly the following
@verbatim
bundle agent x
{
vars:
   "hi"   string => "Hello";
   "list1" slist => { "a", "b", "c" };
   "list2" slist => { "1", "2", "3", "4" };
   "list3" slist => { "x", "y", "z" };

reports:
   !silly_non_existent_context::
     "$(hi) $(list1) $(list2) $(list3)";
}
@end verbatim
@noindent Results in:
@smallexample
R: Hello a 1 x
R: Hello b 1 x
R: Hello c 1 x
R: Hello a 2 x
R: Hello b 2 x
R: Hello c 2 x
R: Hello a 3 x
R: Hello b 3 x
R: Hello c 3 x
R: Hello a 4 x
R: Hello b 4 x
R: Hello c 4 x
R: Hello a 1 y
R: Hello b 1 y
R: Hello c 1 y
R: Hello a 2 y
R: Hello b 2 y
R: Hello c 2 y
R: Hello a 3 y
R: Hello b 3 y
R: Hello c 3 y
R: Hello a 4 y
R: Hello b 4 y
R: Hello c 4 y
R: Hello a 1 z
R: Hello b 1 z
R: Hello c 1 z
R: Hello a 2 z
R: Hello b 2 z
R: Hello c 2 z
R: Hello a 3 z
R: Hello b 3 z
R: Hello c 3 z
R: Hello a 4 z
R: Hello b 4 z
R: Hello c 4 z
@end smallexample

@node  Expressing subroutines in CFEngine,  , Expressing loops in CFEngine, Getting used to declarative expression
@unnumberedsubsec Expressing subroutines in CFEngine
@sp 1
Subroutines are used for both expressing and reusing parameterizable
chunks of code, and for naming chunks for better management of intention.
In CFEngine you define these as @code{methods}. A method is simply a bundle
of promises, possibly with parameters. To call a method, you make a
method-use-bundle promise. In this example, we call a bundle called @code{subtest}
which accepts a parameter from its calling bundle.

@verbatim
body common control
{
# Master execution list
bundlesequence  => { "testbundle"  };
}

###########################################

bundle agent testbundle
{
vars:
 "userlist" slist => { "one", "two", "three" };

methods:
 "any" usebundle => subtest("$(userlist)");
}

###########################################

bundle agent subtest(user)
{
commands:
  "/bin/echo Fix $(user)";
}

@end verbatim
@noindent The use of methods brings multi-dimensional patterns
to convergent configuration management.

@node  Using CFEngine to integrate software components, Cloud computing is a rehearsal, Getting used to declarative expression, Top
@unnumberedsec Using CFEngine to integrate software components
@sp 1

Integration of software components may be addressed with a variety
of approaches and techniques:

@itemize
@item Standard template methods from the COPBL community library (`out of the box'
solutions).
@item Customized, personalized configurations.
@item Package management for software dependencies. 
@item File management - copying, editing, permissions, etc.
@item Process management - starting, stopping, restarting.
@item Security.
@item Monitoring performance and change.
@end itemize

@noindent Needless to say, all of these are easily achievable with 5 minute repair accuracy
using our CFEngine framework.

@node  Cloud computing is a rehearsal,  , Using CFEngine to integrate software components, Top
@unnumberedsec Cloud computing is a rehearsal
@sp 1

We have barely made a dent in CFEngine in this Short Topics Guide.
Let us end by noting briefly that DevOps and Cloud Computing are
merely rehearsals for what is to come next: molecular computing in
which we synthesize complex clusters of components based on higher
level rule based schemas. 

In this future version of IT, knowledge management will be the key
challenge for understanding how to build systems. We fully expect the
APIs of the future virtualized infrastructure to be promise oriented,
and for CFEngine to remain a viable approach to configuration after
other frameworks have become outmoded.


@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https:// 
ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google- 
analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye

