\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename st-cdp.info
@settitle Content-Driven Policies
@setchapternewpage odd
@c %** end of header

@titlepage
@title Content-Driven Policies
@subtitle A CFEngine Special Topics Handbook
@author CFEngine AS


@page

@cartouche
@quotation
This document describes simplified policy writing using Content-Driven
Policies in CFEngine Nova.
@end quotation
@end cartouche

@vskip 0pt plus 1filll
Copyright @copyright{} 2010- CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                      CFEngine is a language based tool specifically
                      designed for configuring and maintaining
                      Unix-like operating systems attached
                      to a TCP/IP network.
@end direntry
@end ifinfo

@ifnottex
@node Top, What is a Content-Driven Policy?, (dir), (dir)
@top Content-Driven Policies
@menu
* What is a Content-Driven Policy?::  
* Why should I use Content-Driven Policies?::  
* How do Content-Driven Policies work in detail?::  
* Can I make my own Content-Diven Policies?::  
@end menu

@end ifnottex
@iftex
@contents
@end iftex

@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
<h2>Summary of contents</h2>
@end html
@end ifhtml

@node What is a Content-Driven Policy?, Why should I use Content-Driven Policies?, Top, Top
@unnumberedsec What is a Content-Driven Policy?

@sp 1

A Content-Driven Policy is a text file with lines containing
semi-colon separated fields, like a spreadsheet or tabular file. Each line in the file is
parsed and results in a specific type of promise being made, depending on which type the
Content-Driven Policy is. The @samp{services} Content-Driven Policy is
shown below.

@sp 1
@smallexample
# masterfiles/cdp_inputs/service_list.txt

Dnscache;stop;fix;windows
ALG;start;warn;windows
RemoteRegistry;start;fix;Windows_Server_2008

@end smallexample
@sp 1

The meaning of the fields are different depending of the policy type,
but explained in the file header. With these three lines, we ensure
the correct status of three services on all our Windows machines and
are given specialized reports on the outcome. The Content-Driven
Policy services report is shown below.

@image{cdp_services_report,15cm}

@node Why should I use Content-Driven Policies?, How do Content-Driven Policies work in detail?, What is a Content-Driven Policy?, Top
@unnumberedsec Why should I use Content-Driven Policies?

@sp 1
As seen in the example above, Content-Driven Policies are easy to write
and maintain, especially for users not very familiar with the CFEngine
language. They are designed to capture the essence of a specific,
popular use of CFEngine, and make it easier. For example, the services
Content-Driven Policy above has the following equivalent in the CFEngine
language.

@smallexample

bundle agent service_example
@{
services:

  "Dnscache"
    comment            => "Check services status of Dnscache",
    handle             => "srv_Dnscache_windows",
    service_policy     => "stop",
    service_method     => force_deps,
    action             => policy("fix"),
    ifvarclass         => "windows";

  "ALG"
    comment            => "Check services status of ALG",
    handle             => "srv_ALG_windows",
    service_policy     => "start",
    service_method     => force_deps,
    action             => policy("warn"),
    ifvarclass         => "windows";

  "RemoteRegistry"
    comment            => "Check services status of ALG",
    handle             => "srv_ALG_windows",
    service_policy     => "start",
    service_method     => force_deps,
    action             => policy("fix"),
    ifvarclass         => "Windows_Server_2008";

@}

@end smallexample

Writing this policy is clearly more time-consuming and error-prone. On
the other hand, it allows for much more flexibility than Content-Driven
Policies, when that is needed.

CFEngine provides Content-Driven Policies to cover mainstream
management tasks like the following.

@itemize
@item File change/difference management
@item Service management
@item Database management
@item Application / script management
@end itemize

@node How do Content-Driven Policies work in detail?, Can I make my own Content-Diven Policies?, Why should I use Content-Driven Policies?, Top
@unnumberedsec How do Content-Driven Policies work in detail?
@sp 1

The text files in @code{masterfiles/cdp_inputs/}
(e.g. @samp{registry_list.txt}) are parsed into CFEngine lists by
corresponding @code{cdp_*} files in @code{masterfiles/}
(e.g. @samp{cdp_registry.cf}). It is the latter set of files that
actually implement the policies in the text files.

The Knowledge Map contains reports specifically designed to match the
Content-Driven Policies.

@node Can I make my own Content-Diven Policies?,  , How do Content-Driven Policies work in detail?, Top
@unnumberedsec Can I make my own Content-Diven Policies?
@sp 1

It is possible to mimic the structure of the existing Content-Driven
Policies to implement new ones, for new purposes. 

However, CFEngine AS will be creating more of these best-practice
policies. Thus, making a feature request at CFEngine Support may
result in your proposal being developed and supported by professionals
at CFEngine AS. Furthermore, Knowledge Map reports currently need to
be developed induvidually by CFEngine AS.

@bye
