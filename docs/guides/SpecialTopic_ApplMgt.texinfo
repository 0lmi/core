\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename st-appmgt.info
@settitle Application Management
@setchapternewpage odd
@c %** end of header

@titlepage
@title Application Management
@subtitle A CFEngine Special Topics Handbook
@author CFEngine AS


@page

@cartouche
@quotation
CFEngine is able to install, update and uninstall services and
applications across all managed nodes in a platform-independent
manner.

Updating software across all nodes can be made as simple as copying a
package to a software server. Thereafter, applications can be managed
and customized using CFEngine.
@end quotation
@end cartouche

@vskip 0pt plus 1filll
Copyright @copyright{} 2010 CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                      CFEngine is a language based tool specifically
                      designed for configuring and maintaining
                      Unix-like operating systems attached
                      to a TCP/IP network.
@end direntry
@end ifinfo

@ifnottex
@node Top, What is Application Management?, (dir), (dir)
@top Application Management
@menu
* What is Application Management?::  
* How can CFEngine help?::      
* Package management::          
* Enterprise Software Reporting::  
* Integrated software installation::  
* Customizing applications::    
* Starting and stopping software::  
* Auditing software applications::  
@end menu



@end ifnottex
@iftex
@contents
@end iftex

@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
<h2>Summary of contents</h2>
@end html
@end ifhtml

@node What is Application Management?, How can CFEngine help?, Top, Top
@unnumberedsec What is Application Management?
@sp 1

Application management concerns the deployment and updating of
software, as well as customization of for actual use, in other words
all the activities required to make an application ready for
use. Initially, software installation packages must be deployed on
host machines, however, we frequently encounter the need to update software due
to security flaws, bugs or new features.

It is generally unwise to let every application update itself
automatically to the newest version from the internet; we want to
decide which version gets installed and also make sure that the load
on the network does not impair performance during mass-updates.  Equally
important is making sure certain applications are not present,
especially when they are known to have security issues.

Using CFEngine, you can verify that the software is in a
promised state and is properly customized for use.

@node How can CFEngine help?, Package management, What is Application Management?, Top
@unnumberedsec How can CFEngine help?
@sp 1

CFEngine assists with application management in a number of ways. Following
the BDMA lifecycle, we note:

@table @i
@item Build
CFEngine can be used to automate the build of packaged software releases
using standardized or custom package formats.
@item Deploy
CFEngine can distribute and install packaged software on any kind of platform.
@item Manage
CFEngine can start, stop, restart, monitor, and upgrade, and customize software
applications.
@item Audit
CFEngine can monitor and report on packages and patches installed on systems and their
versions and status.
@end table

@node Package management, Enterprise Software Reporting, How can CFEngine help?, Top
@unnumberedsec Package management
@sp 1

Application management is simple today on most operating systems due to the
introduction of @i{package systems}.

All major operating systems now have some sort of package management
system, e.g. RPM for Linux, and MSI for Windows. However, their
capabilities and methods vary greatly. Moreover, the packages they need
to install have to be made available to the hosts that need them and
the package manager has to be executed at the right time and
place. This is where CFEngine assists.

Some package managers support online automatic access of online
repositories and can download data from the network. Others have to
have packages copied to local storage first.  CFEngine can work with
both types of system to integrate software management.  
@itemize
@item CFEngine communicates with the system using its own standards
to utilize the approach suitable for that software system.
@item Custom software repositories can be made, and CFEngine's 
agents can perform this distribution
by collecting software packages to local storage and then
installing from there.
@end itemize

When software packages are available on local storage, CFEngine
can check whether they are already installed, and if so, which version
and architecture are installed. This, in turn, can be verified against
the policy for the software --- should it indeed be installed, updated or
removed?

Using the CFEngine standard library, agents know how to talk to the
native package manager to query information and get the system into
the desired state.

CFEngine can edit configuration files in real time to ensure that
applications are customized to local needs at all times.



@node Enterprise Software Reporting, Integrated software installation, Package management, Top
@unnumberedsec Enterprise Software Reporting
@sp 1

In commercial releases of CFEngine, the state of software installation
is reported centrally and is easily accessible through the Knowledge
Map.

Commercial editions of CFEngine also support querying Windows machines
for installed MSI packages and thus allows for easy software
deployment in heterogeneous Unix and Windows
environments.

@node Integrated software installation, Customizing applications, Enterprise Software Reporting, Top
@unnumberedsec Integrated software installation
@sp 1

CFEngine gives complete freedom to users, so there are many
ways to design a system that achieves a desired software end-state. Consider
the following example setup which ensures that one particular
application is up to date on all hosts. The procedure below is
very similar to the way that commercial CFEngine editions update.

Rather than using an OS-specific package repository, like yum, we
create a universal approach using CFEngine's distribution and
installation promises.

We first look at the example on an RPM system, then we show the
modifications required to handle Windows instead. The examples
use body parts from the standard library.

@sp 1
@center @image{update,10cm,,Updating software.,png}
@sp 1



@menu
* Distributing software packages to client hosts::  
* Stopping and restarting an application for update::  
* Adapting to Windows::         
* Notes on Windows systems::  
@end menu

@node Distributing software packages to client hosts, Stopping and restarting an application for update, Integrated software installation, Integrated software installation
@unnumberedsubsec Distributing software packages to client hosts

To begin with, we promise that the relevant software packages will be locally
available to the agents from software servers, i.e. we promise that a
local copy of all deployed software packages will exist in the
directory @file{/software_repo} on local storage. The copy will be collected
and compared against a directory called @file{/master_software_repo}
on host @code{server.example.org} in this example.

@sp 1
@cartouche
We say that this approach is @file{data-driven} because, by placing
software package data in the central repository, client hosts update
automatically, as they promise to subscribe to the data.
@end cartouche

@sp 1

@verbatim
files:

  "/software_repo"

      comment => "Copy app1 updates from software server",
     copy_from => remote_cp("/master_software_repo/app1/$(sys.flavour)",
                             "server.example.org"),
  depth_search => recurse("inf"),
       classes => if_repaired("newpkg_app1");

@end verbatim

When the agent copies a relevant software package from the software
server (@code{sys.flavour} is the local operating system), the class
@code{newpkg_app1} will get defined. This class can act as a trigger
to stop the application, update it, and start it again.

@node Stopping and restarting an application for update, Adapting to Windows, Distributing software packages to client hosts, Integrated software installation
@unnumberedsubsec Stopping and restarting an application for update

On some operating systems, software cannot be updated while it is running.
CFEngine can promise to enure that a program is stopped before update:

@verbatim
processes:

 newpkg_app1::

  "app1" signals => { "term", "kill" };

@end verbatim

CFEngine @i{normal ordering}, ensures that @code{processes}
promises are always run prior to @code{packages} promises, so the
application will be stopped before updated. Next we promise the
version of the software we want to install. In this case, any
version greater than 1.0.0.

@verbatim
packages:

 newpkg_app1::

  "app1"

    package_policy           => "update",
    package_select           => ">=",
    package_architectures    => { "i586" },
    package_version          => "1.0.0",
    package_method           => rpm_version("/software_repo"),
    classes                  => if_else("app1_update", "app1_noupdate");
@end verbatim


By promising carefully what package and version you want, using
@code{package_policy}, @code{package_select}, and
@code{package_version}, CFEngine can keep this promise by updating to
the latest version of the package available in the directory
repository @file{/software_repo}.  If the available versions are all
`less than' than "1.0.0", an update will not take place. The
@code{package_version} specification should match the versioning
format of the software, whatever it is, e.g. you would write something
like "1.00.00.0" if two digits were used in the two middle version
number positions.

@sp 1
@cartouche
CFEngine automatically adapts its versioning
to the conventions used by individual package schemas.
@end cartouche
@sp 1

To summarize, in order for CFEngine to be able to match installed packages with the
ones in the directory repository, the same naming convention must be
applied. That is, the package name, version and architecture must have
the same format in the list of installed packages as the file names of
available packages.

From the promise above, we see that CFEngine will interpret
@code{app1} as the name, @code{1.0.0} as the version and @code{i586}
as the architecture of the package. Using this while looking at the
@code{package_name_convention} in the rpm package method, we see that
CFEngine will look for packages named as @code{app1-X.Y.Z-i586.rpm},
with X, Y, Z producing the largest version available in the directory
repository. If an available version is larger than the one installed,
an update will take place --- the update command is run.

Finally, we set classes from the software update in case we want to
act differently depending on the outcome.

Replacing the policy @samp{update} with @samp{add} is all that is
required to install the package (once) instead of updating. Using policy
@samp{add} will do nothing if the package is already installed, but
installs the largest version available if it is not. Use
@code{package_select => "=="} to install the exact version instead of
the largest.


@node Adapting to Windows, Notes on Windows systems, Stopping and restarting an application for update, Integrated software installation
@unnumberedsubsec Adapting to Windows

@sp 1

To adapt our example to Windows, we change the path to the local
software repository from @file{/software_repo} to @file{c:\software_repo}, to
support the Windows path format. Other than that, all we have to
change is the @code{package_method}, yielding the following.

@verbatim

    package_method           => msi_version("c:\software_repo"),

@end verbatim

Refer to the @code{msi_version} body in the standard library.

@node Notes on Windows systems,  , Adapting to Windows, Integrated software installation
@unnumberedsubsec Notes on Windows systems

CFEngine implements Windows packaging using the MSI subsystem,
internally querying the Windows Management Interface for information. However,
not all Windows systems have the reqired information.

CFEngine relies on the name (lower-cased with spaces replaced by
hyphen) and version fields found inside the msi packages to look for
upgrades in the package repository.

Problems can arise when the format of these fields differ from their
format in the file names. For example, a package file name may be
@code{7zip-4.65-x86_64.msi}, while the product name in the msi is
given as @code{7-Zip 4.65 (x64 edition)}, and the version is
@code{4.65.00.0}.

For the formats to match, we can change the product name to
@code{7zip} and the version to @code{4.65} in the msi-package. Free
tools such as @code{InstEd} can both view and change the product name
and version (Tables->Property->ProductName and ProductVersion).


@node Customizing applications, Starting and stopping software, Integrated software installation, Top
@unnumberedsec Customizing applications

@sp 1
By definition, we cannot explain how to customize software for all
cases. For Unix-like systems however, software customization is
usually a matter of editing a configuration text file. CFEngine can
edit files, for instance, to add a configuration line to a file, you
might so something like this:

@verbatim
bundle agent my_application_customize
{
files:

  "$(prefix)/config.cf" 

        comment => "Set the permissions and add a line...",
      perms     => mo("0600","root"),
      edit_line => append_if_no_line("My custom setting...");
}

@end verbatim
@noindent To set a number of variables inside a file, you might do something like this:
@verbatim
bundle agent my_application_customize
{
vars:

  # want to set these values by the names of their array keys

  "rhs[serverhost]" string => "123.456.789.123";
  "rhs[portnumber]" string => "1234";
  "rhs[admin]"      string => "admin@example.org";

files:

  "$(prefix)/config.cf"

       comment => "Add new variables or set existing ones",
     edit_line => set_variable_values("setvars.rhs");

}

@end verbatim
You can also create file templates with customizable variables using
the @code{expand_template} method from the standard library.

@node Starting and stopping software, Auditing software applications, Customizing applications, Top
@unnumberedsec Starting and stopping software

CFEngine is promise or compliance oriented. You promise whether software will be
running or not running at different times and locations by making
@code{processes} or @code{services} promises.

To start a service, you might do something like this:

@verbatim
processes:

   "myprocess"  restart_class => "start_me";

commands:

  start_me::

    "/path/to/software"

         # ... many security options, etc

@end verbatim
@noindent or using services
@verbatim
services:

 windows::

  "Dhcp"
    service_policy => "start",
    service_dependencies => { "Alerter", "W32Time" },
    service_method => winmethod;

@end verbatim
To stop a service, you take one of these approaches:

@verbatim
processes:

   "badprocess"  
      signals => { "term", "kill" };

   "snmp" 
      process_stop => "/etc/init.d/snmp stop";

@end verbatim



@node Auditing software applications,  , Starting and stopping software, Top
@unnumberedsec Auditing software applications

@sp 1
Commercial Editions of CFEngine generate reports about installed
software, showing package names and versions that are installed.
There is a huge variety in the functionality offered by different
package systems. The most sophisticated package managers are those
provided by OpenSuSE Linux and RedHat. These know the difference
between installation packages and software updates and can keep
track of installed software transparently. Most package systems 
have fewer functions. 

CFEngine tries to make the best of each package system to collect
information about the state of software. In commercial editions
you have access to reports on the software installed on each system
in the network, to the extent permitted by the software subsystems
on those hosts.


@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https:// 
ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google- 
analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye

