
The @code{bundlesequence} determines which of the compiled bundles
will be executed and in what order they will be executed. The list
refers to the names of bundles (which might be parameterized
function-like objects).

The order in which you execute bundles can affect the outcome of your
promises. In general you should always define variables before you use them.

The @code{bundlesequence} is like a genetic makeup of a machine. The bundles
act like characteristics of the systems. If you want different systems to have
different bundlesequences, distinguish them with classes:

@verbatim
webservers::

  bundlesequence => { "main", "web" };

others::

  bundlesequence => { "main", "otherstuff" };

@end verbatim

If you want to add a basic common sequence to all sequences, then use
global variable lists to do this:

@verbatim
body common control
{
webservers::

  bundlesequence => { @(g.bs), "web" };

others::

  bundlesequence => { @(g.bs), "otherstuff" };

}

bundle common g
{
vars:

  "bs" slist => { "main", "basic_stuff" }; 
}

@end verbatim

@noindent @b{Default value}:@*
@*

There is no default value for @code{bundlesequence}, and the absence of a
@code{bundlesequence} will cause a compilation error.  A bundlesequence may
also be specified using the @code{-b} or @code{--bundlesequence} command line
option.

