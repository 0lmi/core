
Services promises for Windows are only available in CFEngine Nova and
above.
Windows Vista/Server 2008 and later introduced new complications to
the service security policy. Therefore, when testing @code{services}
promises from the command line, CFEngine may not be given proper
access rights, which gives errors like "Access is denied". However,
when running through the CFEngine Nova Executor service, typical for
on production machines, CFEngine has sufficent rights.

Services of type @samp{generic} promises are implemented for all
operating systems and are merely as a convenient front-end to
@code{processes} and @code{commands}.  If nothing else is specified,
CFEngine looks for an special reserved agent bundle called 

@verbatim
bundle agent standard_services(service,state)
{
...
}
@end verbatim

This bundle is called with two parameters: the name if the service and
a start/stop state variable. The CFEngine standard library defines
many common services for standard operating systems for convenience.
If no @code{service_bundle} is defined in a @code{service_method}
body, then CFEngine assumes the @samp{standard_services} bundle to be
the default source of action for the services. This is executed just
like a @code{methods} promise on the service bundle, so this is merely
a front-end.

The standard bundle can be replaced with another, as follows, e.g. for
testing purposes:

@verbatim
body common control
{
bundlesequence => { "test" };
}

#

bundle agent test
{
vars:

 "mail" slist => { "spamassassin", "postfix" };


services:

  "www" service_policy => "start",
        service_method => service_test;


  "$(mail)" service_policy => "stop",
        service_method => service_test;
}

#

body service_method service_test
{
service_bundle => non_standard_services("$(this.promiser)","$(this.service_policy)");
}

#

bundle agent non_standard_services(service,state)
{
reports:

  !done::

    "Test service promise for \"$(service)\" -> $(state)";
}
@end verbatim

Note that the special variables @code{$(this.promiser)} and
@code{$(this.service_policy)} may be used to fill in the service and
state parameters from the promise definition. The @code{$(this.service_policy)} 
variable is only defined for services promises.
